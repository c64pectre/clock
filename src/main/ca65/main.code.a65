;    clock: Clock application for the Commodore 64.
;    Copyright (C) 2022  C64PECTRE
;
;    This program is free software: you can redistribute it and/or modify
;    it under the terms of the GNU General Public License as published by
;    the Free Software Foundation, either version 3 of the License, or
;    (at your option) any later version.
;
;    This program is distributed in the hope that it will be useful,
;    but WITHOUT ANY WARRANTY; without even the implied warranty of
;    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;    GNU General Public License for more details.
;
;    You should have received a copy of the GNU General Public License
;    along with this program.  If not, see https://www.gnu.org/licenses/.
;
;    Contact: https://github.com/c64pectre/clock/ create an issue

DEBUG_CLOCK_1_Y = 23
DEBUG_CLOCK_1_X = 11
DEBUG_CLOCK_1_DISPLAY = SCREEN_TEXT_RAM + VIC_CHAR_COLUMNS * DEBUG_CLOCK_1_Y + DEBUG_CLOCK_1_X

DEBUG_CLOCK_2_Y = 23
DEBUG_CLOCK_2_X = 28
DEBUG_CLOCK_2_DISPLAY = SCREEN_TEXT_RAM + VIC_CHAR_COLUMNS * DEBUG_CLOCK_2_Y + DEBUG_CLOCK_2_X

IRQ_AT_RASTER_LINE = VIC_VISIBLE_SCREEN_OFFSET_Y + VIC_VISIBLE_SCREEN_SIZE_Y + 1

TOD_0       = ZP_2_FIRST + 0
TOD_0_10THS = TOD_0 + 0
TOD_0_SEC   = TOD_0 + 1
TOD_0_MIN   = TOD_0 + 2
TOD_0_HR    = TOD_0 + 3

TOD_1       = ZP_2_FIRST + 4
TOD_1_10THS = TOD_1 + 0
TOD_1_SEC   = TOD_1 + 1
TOD_1_MIN   = TOD_1 + 2
TOD_1_HR    = TOD_1 + 3

;;; summary: main
.proc main
    jsr initialize
    jsr event_loop
    jsr finalize
    ;
    rts
.endproc

;;; summary: Initialize
.proc initialize
    jsr display_main_screen
    jsr initialize_clock_1
    jsr initialize_clock_2
    jsr set_irq_handler
    ;
    rts
.endproc

.proc finalize
    jsr unset_irq_handler
    rts
.endproc

;;; summary: Display main screen
.proc display_main_screen
    lda # CONFIG_BORDER_COLOR
    sta VIC_EC
    lda # CONFIG_BACKGROUND_COLOR
    sta VIC_B0C
    ;
    ldaxv INIT_MAIN_SCREEN
    jsr puts

    from
        ldx # 250
    loop
        lda MAIN_SCREEN           - 1, x
        sta SCREEN_TEXT_RAM       - 1, x
        lda MAIN_SCREEN     + 250 - 1, x
        sta SCREEN_TEXT_RAM + 250 - 1, x
        lda MAIN_SCREEN     + 500 - 1, x
        sta SCREEN_TEXT_RAM + 500 - 1, x
        lda MAIN_SCREEN     + 750 - 1, x
        sta SCREEN_TEXT_RAM + 750 - 1, x
    next
        dex
        bne _loop
    end
    ;
    rts
.endproc

;;; summary: Put string
;;; input:
;;;   AX = pointer to null terminated string
.proc puts
    from
        ldy # 0
    loop
        lda [AX] , y
        beq _end                                            ; break
        jsr KERNAL_CHROUT
    next
        iny
        bne _loop
        inc AH
        bne _loop
    end
    ;
    rts
.endproc

.proc work
    jsr read_cia_1_to_tod_0
    lda TOD_0_HR
    jsr tod_hr_to_h24
    sta TOD_0_HR
    jsr display_debug_clock_1
    ;
    jsr read_cia_2_to_tod_1
    lda TOD_1_HR
    jsr tod_hr_to_h24
    sta TOD_1_HR
    jsr display_debug_clock_2
    ;
    rts
.endproc

;;; summary: debug display TOD_0
.proc display_debug_clock_1
    from
        ldy # 0
        ldx # (CIA_TOD_HR - CIA_TOD_10THS)
    loop
        lda TOD_0_10THS , x
        pha
            lsr
            lsr
            lsr
            lsr
            ora # %00110000                         ; $0..$f to charset '0' .. '9'
            sta DEBUG_CLOCK_1_DISPLAY , y
            iny
        pla
        and # $0f
        ora # %00110000
        sta DEBUG_CLOCK_1_DISPLAY , y
        iny
        iny
    next
        dex
        bpl _loop
    end
    ;
    rts
.endproc

.proc display_debug_clock_2
    from
        ldy # 0
        ldx # (CIA_TOD_HR - CIA_TOD_10THS)
    loop
        lda TOD_1 , x
        pha
            lsr
            lsr
            lsr
            lsr
            ora # %00110000
            sta DEBUG_CLOCK_2_DISPLAY , y
            iny
        pla
        and # $0f
        ora # %00110000
        sta DEBUG_CLOCK_2_DISPLAY , y
        iny
        iny
    next
        dex
        bpl _loop
    end
    ;
    rts
.endproc

;;; summary: Initializa TOD of CIA-1 to 12:03:04.5 [24-hour clock] = PM 12:03:04.5 [12-hour clock]
;;; notes:
;;;   We must write in order from HR to 10THS, because write to HR stops the
;;;   clock and write to 10THS starts the clock.
.proc initialize_clock_1
    ; Set 50/60 Hz depending on PAL/NTSC (not reliable on exotic models).
    lda CIA_1_CRA
    and # CIA_CRA_RTC_FREQUENCY_CLR
    ldx KVAR_PALNTS                                 ; $00: NTSC, $01: PAL
    if_ne_then
        ora # CIA_CRA_RTC_FREQUENCY_50HZ
        bne _end                                  ; bra
    else
        ora # CIA_CRA_RTC_FREQUENCY_60HZ
    end
    ;
    sta CIA_1_CRA
    ;
    lda # ($12 | CIA_TOD_HR_AMPM_MASK_SET_PM)               ; sets to $12 = 12 AM = 00 [24]
    sta CIA_1_TOD_HR
    lda # $00
    sta CIA_1_TOD_MIN
    lda # $00
    sta CIA_1_TOD_SEC
    lda # $00
    sta CIA_1_TOD_10THS
    ;
    rts
.endproc

;;; summary: Initializa TOD of CIA-2 to 23:58:59.4 [24-hour clock] = PM 11:58:59.4 [12-hour clock]
.proc initialize_clock_2
    ; Set 50/60 Hz depending on PAL/NTSC (not reliable on exotic models).
    lda CIA_2_CRA
    and # CIA_CRA_RTC_FREQUENCY_CLR
    ldx KVAR_PALNTS                                 ; $00: NTSC, $01: PAL
    if_ne_then
        ora # CIA_CRA_RTC_FREQUENCY_50HZ
        bne _end                                  ; bra
    else
        ora # CIA_CRA_RTC_FREQUENCY_60HZ
    end
    ;
    sta CIA_2_CRA
    ;
    lda # $12                                               ; sets to $92 = 12 PM = 12 [24]
    sta CIA_2_TOD_HR
    lda # $00
    sta CIA_2_TOD_MIN
    lda # $00
    sta CIA_2_TOD_SEC
    lda # $00
    sta CIA_2_TOD_10THS
    ;
    rts
.endproc

;;; summary: Link IRQ handler
.proc set_irq_handler
    sei
        ; Set IRQ at raster
        lda # IRQ_AT_RASTER_LINE
        sta VIC_RST
        lda VIC_CONTROL_1
        and # VIC_CONTROL_1_RST8_CLR
        sta VIC_CONTROL_1
        ; Enable raster IRQ
        lda VIC_IE
        ora # VIC_IE_RST_SET
        sta VIC_IE
        ;
        ldwv KERNAL_CINV, irq_handler
    cli
    ;
    rts
.endproc

;;; summary: Unlinq IRQ handler
.proc unset_irq_handler
    sei
        ldwv KERNAL_CINV, KERNAL_INTERNAL_KEY
    cli
    ;
    rts
.endproc

;;; summary: IRQ handler
.proc irq_handler
    ; assert I == 1
    ;
    bit VIC_IR
    if_mi_then
        ; VIC interrupt
        ; Clear all VIC interrupts
        lda # $FF
        sta VIC_IR
        ;
       ;dec VIC_EC
            jsr work
       ;inc VIC_EC
    else_end
    ;
    jmp KERNAL_INTERNAL_KEY
.endproc

.proc event_loop
    from_loop
        jsr KERNAL_GETIN
        cmp # 'x'
        beq _end                                            ; break
    next
        jmp _loop
    end
    ;
    rts
.endproc

;;; summary: Read CIA-1 TOD to TOD_0
;;; notes:
;;;   Read CIA_i.TOD_HR latches and read CIA.TOD_10THS releases latch.
.proc read_cia_1_to_tod_0
    from
        ldx # (CIA_TOD_HR - CIA_TOD_10THS)
    loop
        lda CIA_1_TOD_10THS , x
        sta TOD_0_10THS , x
    next
        dex
        bpl _loop
    end
    ;
    ; TODO: convert H12 to H24
    ;
    rts
.endproc

;;; summary: Read CIA-2 TOD to TOD_1
;;; notes:
;;;   Read CIA_i.TOD_HR latches and read CIA.TOD_10THS releases latch.
.proc read_cia_2_to_tod_1
    from
        ldx # (CIA_TOD_HR - CIA_TOD_10THS)
    loop
        lda CIA_2_TOD_10THS , x
        sta TOD_1_10THS , x
    next
        dex
        bpl _loop
    end
    ;
    ; TODO: convert H12 to H24
    ;
    rts
.endproc

;;; summary: convert TOD hour (12-hour clock) to hour on 24-hour clock
;;; input:
;;;   A = TOD_HR
;;; output:
;;;   A = hour on 24 hour clock in BCD
;;; require:
;;;   ($01 <= A and A <= $09) or ($10 <= A and A <= $12) or ($81 <= A and A <= $89) or ($90 <= A and A <= $92)
;;; ensure:
;;;   ($00 <= A and A <= $09) or ($10 <= A and A <= $19) or ($20 <= A and A <= $23)
.proc tod_hr_to_h24
    ; check I == 1
    cmp # $81
    if_ge_then if_ge_81
        ; A >= $81
        cmp # $92
        if_eq_then
            lda # $12
            bne if_ge_81::_end                              ; optimization because no code after end
        else
            sed
                sec
                sbc # $68
            cld
            ; check A != 0
        end
        ;
        bne _end                                            ; bra
    else
        ; A < $81
        cmp # $12
        if_eq_then
            lda # $00
        else_end
    end
    ;
    rts
.endproc

;;; summary: convert hour on 24-hour clock to TOD hour (12-hour clock)
;;; input:
;;;   A = hour on 24 hour clock in BCD
;;; output:
;;;   A = TOD_HR
;;; require:
;;;   ($00 <= A and A <= $09) or ($10 <= A and A <= $19) or ($20 <= A and A <= $23)
;;; ensure:
;;;   ($01 <= A and A <= $09) or ($10 <= A and A <= $12) or ($81 <= A and A <= $89) or ($90 <= A and A <= $92)
.proc h24_to_tod_hr
    ; check I == 1
    cmp # $13
    if_ge_then
        ; A >= $13
        sed
            clc
            adc # $68
        cld
        bne _end                                            ; bra
    else
        ; A < $13
        cmp # $00
        if_eq_then
            lda # $00
        end
    end
    ;
    rts
.endproc
